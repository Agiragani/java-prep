on -1 off -0  ------------> ASCII / UNICODE 

s.l:- designing of website

p.l:- developing of application

									computer lang
								
							scripting lang			programming lang
							
				html,css,js,ts......				pop     oop
											
										B,Basic,python.		java,.net,python,.....
										
	
	SECURITY :- Abstraction , Encapsulation
	
	PERFORMANCE :- Inheritance , Polymorphism
	
	
	java :-    oops     oopl
	
	
	(1)Platform independency
	
	(2)Garbage collector
	
	
	java:-sunmicro sys------------------------->oracle


	greentalk(.gt)------------->oak------------->java(.java)
	
	
	jdk 1.0------------------------------------> jdk 23
	
	
	jse/j2se:- standalone app(no client-server)  -core java
	
	jee/j2ee:- distributed ,web app ...(client-server) -Adv java
	
	jme/j2me:- mobile app - micro core java
	
	
	java --version
	
	
	java - 53
	
	shortcuts:-
	----------	
	main :-  ctrl+space
	
	syso :- ctrl+space
	
	format :- ctrl+shift+f
	
	
	variable :-
	
	syntax:-        datatype  variablename ;  //declaration of a variable
	
					datatype  variablename = value ; //intiallization of a variable
					
					
			
			local variable(within the method)					global variable(outside the methods)
	
														static g.v        instance g.v
														
syntax:-
======
	
static:- static datatype  variablename = value ; 
	
instance :-  datatype  variablename = value ; 
	
memoryAllocation:-
=================

static:- Static prop's will gets the memory space only once at the time of class loading into
				the jvm

instance :- Instance prop's will gets the memory space for every object creation.
				
				syntax:- ClassName objname = new ClassName();

Access:-
======

static :- Static prop's can be accessed by the class reference

instance :- Instance prop's can be accessed by the object reference

In the memory:-
==============

static :- Method Area

instance :- Heap Area

Usage:-
=====

static :- common data   ------>nationality --Indain

instance :- unique data ------>aadhar      --unique id



operators:-ULTRA AB
==========


		a   +   b-->operand
		
		
		methods:- The set of statments where altogether performs the similar task.
		
		signature/syntax:- 
		
					accessModifer returnType methodName(prams...){
					
					//body
					}

		2 types:- based on the syntax diff
		
		
		(1)Static Method
		
		syntax:-
						accessModifer static returnType methodName(prams...){
					
							//body
							}
		
		(2)Dynmanic Method
		syntax:- 
		
					accessModifer returnType methodName(prams...){
					
					//body
					}
					
					
					
		class = variables + methods(class members + member functions)
	
	
		obj:-   	ClassName objName ;   //declaration of an object 
		====		
					ClassName objName = new ClassName();
					
					
					
		Inheritance :-  Acquiring parent class features to the child class.
		===========
		
				
				extends 						implements
			cls---->cls						int----------->cls
			
			int---->int
			
			
	class A{    //   parent/super 
	
	1000 methods
	}
	
	class B extends A{  //child/base/sub
	
	2 methods ============> 1002 methods
	}
	
	
	class A{					class B{
	
	add(a,b){					add(x,y){
	
	(a+b);						(x*y);
	
	}							}
	
	
	class C extends A,B {
	
	obj.add(4,7); 
	
	}
	
	
	
	* Multiple Inheritance is not supported in java @ Class Level.
	
	* Multiple Inheritance is supported in java @interface Level.
	
	
	methods :-  2 types---->based on the implementation/body
	
	
	(1)concrete method:- the method with method body.
	
	
	syntax:-   accessModifer returnType methodName(prams...){
	------				
					//body
					}

	
	(2)abstract method:- the method without method body.
	
	syntax:-   accessModifer returnType methodName(prams...);
	------
	
	
	
	class :-It is the only collection of concrete methods
	
	interface :- It is the only collection of abstract methods
	
	abstract class :-It is the combination of both abstract + concrete methods.